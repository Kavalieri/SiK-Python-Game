[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sik-python-game"
version = "0.1.0"
description = "Videojuego 2D desarrollado con Python y Pygame-ce"
authors = [
	{name = "SiK Team", email = "team@sik-game.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
	"Development Status :: 3 - Alpha",
	"Intended Audience :: End Users/Desktop",
	"License :: OSI Approved :: MIT License",
	"Operating System :: OS Independent",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Topic :: Games/Entertainment",
	"Topic :: Multimedia :: Graphics",
]
keywords = ["game", "pygame", "2d", "python", "videojuego"]
dependencies = [
	"pygame-ce>=2.4.0",
	"pygame-menu>=4.4.0",
	"pygame-gui>=0.6.9",
	"pygame-tools>=0.1.0",
	"pygame-extra>=0.1.0",
	"pymunk>=6.6.0",
	"numpy>=1.24.0",
	"pillow>=10.0.0",
]

[project.optional-dependencies]
dev = [
	"pytest>=7.4.0",
	"pytest-cov>=4.1.0",
	"black>=23.0.0",
	"flake8>=6.0.0",
	"mypy>=1.5.0",
]
build = [
	"pyinstaller>=5.13.0",
	"cx-freeze>=6.15.0",
]

[project.scripts]
sik-game = "src.main:main"

[project.urls]
Homepage = "https://github.com/sik-team/sik-python-game"
Repository = "https://github.com/sik-team/sik-python-game"
Documentation = "https://github.com/sik-team/sik-python-game/docs"
"Bug Tracker" = "https://github.com/sik-team/sik-python-game/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
	".git",
	"__pycache__",
	"build",
	"dist",
	".venv",
	"venv",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
	"slow: marks tests as slow (deselect with '-m \"not slow\"')",
	"integration: marks tests as integration tests",
	"unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
	"*/tests/*",
	"*/test_*",
	"*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
	"pragma: no cover",
	"def __repr__",
	"if self.debug:",
	"if settings.DEBUG",
	"raise AssertionError",
	"raise NotImplementedError",
	"if 0:",
	"if __name__ == .__main__.:",
	"class .*\\bProtocol\\):",
	"@(abc\\.)?abstractmethod",
]
