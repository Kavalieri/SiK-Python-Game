# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor.`.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore
.cursor

# === ESPECÍFICO PYGAME Y JUEGOS ===

# Archivos de guardado de juego (datos de usuario)
saves/
save_*.json
save_*.dat
*.save

# Capturas de pantalla y recordings
screenshots/
recordings/
*.png.temp
*.jpg.temp

# Configuración de usuario local
user_config.json
player_settings.json
keybindings.json

# Logs específicos del juego
game.log*
*.log
*.log.*

# === CONFIGURACIÓN ESPECÍFICA DEL PROYECTO SiK-Python-Game ===

# DIRECTORIOS LOCALES (NO SINCRONIZAR CON GIT)
ARCHIVE/
save/
.vscode/
tmp/
test/
data/

# NOTA: save/ y data/ son directorios que el juego crea durante la ejecución
# No deben heredarse del proyecto, se generan automáticamente

# Logs específicos del juego
logs/
game.log*

# Releases y distribución
releases/

# Scripts de utilidad temporal (generados dinámicamente)
normalize_encoding.ps1
fix_database.py
init_database.py
check_db.py

# Archivos de base de datos SQLite (datos de usuario)
*.db
*.sqlite
*.sqlite3
*.db-wal
*.db-shm
*.db-journal

# === ESTRUCTURA CENTRALIZADA DEV-TOOLS ===
# Los directorios base se mantienen, pero excluir contenido temporal/generado

# Coverage y testing generados
dev-tools/coverage/htmlcov/
dev-tools/coverage/coverage.xml
dev-tools/coverage/.coverage*
dev-tools/testing/reports/
dev-tools/testing/fixtures/temp/
dev-tools/testing/pytest_cache/

# Benchmarking y profiling
dev-tools/benchmarking/results/
dev-tools/benchmarking/.benchmarks/

# Archive temporal
dev-tools/archive/temp/
dev-tools/archive/backups/auto/

# Debugging temporal
dev-tools/debugging/temp/
dev-tools/debugging/dumps/
dev-tools/debugging/profiles/

# Packaging generado
dev-tools/packaging/dist/
dev-tools/packaging/build/
dev-tools/packaging/releases/

# Scripts temporales
dev-tools/scripts/temp/

# === ARCHIVOS TEMPORALES Y BACKUP ===

# Archivos temporales del proyecto
cleanup_*/
backup_*/
temp/
tmp/
*.temp
*.tmp
*.bak
*.old
*.orig
*_backup.*
*_original.*
*_temp.*
commit_message.txt

# Archivos de configuración temporal/local
config.local.json
.env.local
.env.development.local

# Archivos de testeo temporal
test_*.temp
debug_*.temp
diagnostico*.py

# === EMPAQUETADO Y DISTRIBUCIÓN ===

# Archivos compilados/ejecutables
*.exe
*.zip
*.tar.gz
*.tar.bz2
*.7z
*.rar
*.msi
*.dmg
*.pkg
*.deb
*.rpm

# Directorios de distribución
dist/
build/
releases/
*.spec

# PyInstaller específico
*.manifest

# === CONFIGURACIÓN DE EDITORES Y HERRAMIENTAS ===

# VS Code - excluir todo excepto configuración esencial
.vscode/
!.vscode/settings.json
!.vscode/launch.json
!.vscode/tasks.json
!.vscode/extensions.json

# PyCharm/IntelliJ
.idea/

# Cursor AI - excluir completamente
.cursor/
.cursorignore
.cursorindexingignore

# Poetry - mantener lock file para reproducibilidad
poetry.lock

# Pylint, MyPy, Ruff caches
.pylint.d/
.mypy_cache/
.ruff_cache/

# Pre-commit hooks
.pre-commit-config.yaml

# === CONFIGURACIÓN DE DESARROLLO ===
# Configuración personal de desarrollador
.env.local
.env.development.local
config.local.json

# === SISTEMA OPERATIVO ===
# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*

# Linux
*~
.fuse_hidden*
.directory
.Trash-*

# === CONFIGURACIÓN ESTÁNDAR PYTHON ===
